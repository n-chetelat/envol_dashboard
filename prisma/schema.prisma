// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Commands:
// npx prisma format
// npx prisma generate
// npx prisma db push
// npx prisma studio

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Language {
  EN
  FR
}

enum ProfileType {
  BUSINESS
  INSTRUCTOR
  STUDENT
}

model Profile {
  id               String      @id @default(uuid()) @db.Uuid
  userId           String      @unique @db.VarChar(225)
  firstName        String      @db.VarChar(225)
  lastName         String      @db.VarChar(225)
  preferredName    String?     @db.VarChar(225)
  pronouns         String[]    @db.VarChar(30)
  preferredLang    Language    @default(EN)
  phoneNumber      String      @db.VarChar(30)
  defaultDashboard ProfileType @default(STUDENT)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now()) @updatedAt

  businesses  Business[]
  instructors Instructor[]
  students    Student[]

  stripeCustomer StripeCustomer?

  @@index([userId])
}

model Business {
  id           String   @id @default(uuid()) @db.Uuid
  name         String?  @db.VarChar(50)
  bio          String?
  phoneNumber  String?  @db.VarChar(30)
  contactEmail String?  @db.VarChar(30)
  published    Boolean  @default(false)
  profile      Profile  @relation(fields: [profileId], references: [id])
  profileId    String   @unique @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  instructorProfileTokens InstructorToken[]
  courses                 Course[]
  courseListings          CourseListing[]
  locations               Location[]
  stripeAccount           StripeAccount?
}

model Instructor {
  id        String   @id @default(uuid()) @db.Uuid
  bio       String?
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id        String   @id @default(uuid()) @db.Uuid
  bio       String?
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseSessions CourseSession[]
}

model BusinessToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @db.VarChar(250)
  used      Boolean  @default(false)
  email     String   @db.VarChar(50)
  expiresAt DateTime @default(dbgenerated("(now() AT TIME ZONE 'UTC' + interval '1 day')")) @db.Timestamptz
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InstructorToken {
  id         String   @id @default(uuid()) @db.Uuid
  token      String   @db.VarChar(250)
  used       Boolean  @default(false)
  email      String   @db.VarChar(50)
  business   Business @relation(fields: [businessId], references: [id])
  businessId String   @unique @db.Uuid
  expiresAt  DateTime @default(dbgenerated("(now() AT TIME ZONE 'UTC' + interval '1 day')")) @db.Timestamptz
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Course {
  id           String   @id @default(uuid()) @db.Uuid
  name         String   @db.VarChar(225)
  description  String
  requirements String
  business     Business @relation(fields: [businessId], references: [id])
  businessId   String   @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  courseListings CourseListing[]
}

model CourseListing {
  id           String     @id @default(uuid()) @db.Uuid
  location     Location   @relation(fields: [locationId], references: [id])
  locationId   String     @db.Uuid
  course       Course     @relation(fields: [courseId], references: [id])
  courseId     String     @db.Uuid
  business     Business   @relation(fields: [businessId], references: [id])
  businessId   String     @db.Uuid
  timePeriod   TimePeriod @relation(fields: [timePeriodId], references: [id])
  timePeriodId String     @db.Uuid
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  courseSessions CourseSession[]
}

model CourseSession {
  id              String        @id @default(uuid()) @db.Uuid
  courseListing   CourseListing @relation(fields: [courseListingId], references: [id])
  courseListingId String        @db.Uuid
  student         Student       @relation(fields: [studentId], references: [id])
  studentId       String        @db.Uuid
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
}

model Location {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar(225)
  description String
  address     String   @db.VarChar(225)
  business    Business @relation(fields: [businessId], references: [id])
  businessId  String   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  coursesListings CourseListing[]
}

model TimePeriod {
  id         String    @id @default(uuid()) @db.Uuid
  frequency  Frequency
  weekdays   Weekday[]
  time       String // E.g 18:45
  date       DateTime?
  start_date DateTime?
  end_date   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt

  courseListings CourseListing[]
}

enum Frequency {
  ONCE
  RECURRING
}

enum Weekday {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

model StripeAccount {
  id                 String   @id @default(uuid()) @db.Uuid
  stripeAccountId    String   @unique
  chargesEnabled     Boolean  @default(false)
  payoutsEnabled     Boolean  @default(false)
  onboardingComplete Boolean  @default(false)
  business           Business @relation(fields: [businessId], references: [id])
  businessId         String   @unique @db.Uuid
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
}

model StripeCustomer {
  id               String   @id @default(uuid()) @db.Uuid
  stripeCustomerId String
  profile          Profile  @relation(fields: [profileId], references: [id])
  profileId        String   @unique @db.Uuid
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
}

enum WebhookEventStatus {
  DONE
  FAILED
  PENDING
}

// https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types/working-with-json-fields
model WebhookEvent {
  id               String             @id @default(uuid()) @db.Uuid
  data             Json
  source           String             @db.VarChar(225)
  processingErrors String
  status           WebhookEventStatus
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
}

// Membership? -> profile id (student), business id, stripe subscription id, stripe checkout session id, status. Unique by student and business (avoid multiple subscriptions). checkout session mode is "subscription". There are other modes for one-time payments

// There is a way for businesses to set their own prices (there are stripe price and product objects)
