generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Profile {
  id               String          @id @default(uuid()) @db.Uuid
  userId           String          @unique @db.VarChar(225)
  firstName        String          @db.VarChar(225)
  lastName         String          @db.VarChar(225)
  preferredName    String?         @db.VarChar(225)
  pronouns         String[]        @db.VarChar(30)
  preferredLang    Language        @default(EN)
  phoneNumber      String          @db.VarChar(30)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt
  defaultDashboard ProfileType     @default(STUDENT)
  business         Business?
  instructor       Instructor?
  stripeCustomer   StripeCustomer?
  student          Student?

  @@index([userId])
}

model Business {
  id                      String            @id @default(uuid()) @db.Uuid
  name                    String?           @db.VarChar(50)
  bio                     String?
  phoneNumber             String?           @db.VarChar(30)
  contactEmail            String?           @db.VarChar(30)
  published               Boolean           @default(false)
  profileId               String            @unique @db.Uuid
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  profile                 Profile           @relation(fields: [profileId], references: [id], onDelete: Cascade)
  courses                 Course[]
  courseListings          CourseListing[]
  instructorProfileTokens InstructorToken[]
  locations               Location[]
  stripeAccount           StripeAccount?
}

model Instructor {
  id        String   @id @default(uuid()) @db.Uuid
  bio       String?
  profileId String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Student {
  id             String          @id @default(uuid()) @db.Uuid
  bio            String?
  profileId      String          @unique @db.Uuid
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  courseSessions CourseSession[]
  profile        Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model BusinessToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @db.VarChar(250)
  used      Boolean  @default(false)
  email     String   @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime @default(dbgenerated("((now() AT TIME ZONE 'UTC'::text) + '1 day'::interval)")) @db.Timestamptz(6)
}

model InstructorToken {
  id         String   @id @default(uuid()) @db.Uuid
  token      String   @db.VarChar(250)
  used       Boolean  @default(false)
  email      String   @db.VarChar(50)
  businessId String   @db.Uuid
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  expiresAt  DateTime @default(dbgenerated("((now() AT TIME ZONE 'UTC'::text) + '1 day'::interval)")) @db.Timestamptz(6)
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
}

model Course {
  id             String          @id @default(uuid()) @db.Uuid
  name           String          @db.VarChar(225)
  description    String
  requirements   String
  businessId     String          @db.Uuid
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  business       Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  courseListings CourseListing[]
}

model CourseListing {
  id             String          @id @default(uuid()) @db.Uuid
  locationId     String          @db.Uuid
  courseId       String          @db.Uuid
  businessId     String          @db.Uuid
  timePeriodId   String          @db.Uuid
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  business       Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  course         Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  location       Location        @relation(fields: [locationId], references: [id], onDelete: Cascade)
  timePeriod     TimePeriod      @relation(fields: [timePeriodId], references: [id], onDelete: Cascade)
  courseSessions CourseSession[]
}

model CourseSession {
  id              String        @id @default(uuid()) @db.Uuid
  courseListingId String        @db.Uuid
  studentId       String        @db.Uuid
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  courseListing   CourseListing @relation(fields: [courseListingId], references: [id], onDelete: Cascade)
  student         Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Location {
  id              String          @id @default(uuid()) @db.Uuid
  name            String          @db.VarChar(225)
  description     String
  address         String          @db.VarChar(225)
  businessId      String          @db.Uuid
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
  coursesListings CourseListing[]
  business        Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
}

model TimePeriod {
  id             String          @id @default(uuid()) @db.Uuid
  frequency      Frequency
  weekdays       Weekday[]
  time           String
  date           DateTime?
  start_date     DateTime?
  end_date       DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  courseListings CourseListing[]
}

model StripeAccount {
  id                 String   @id @default(uuid()) @db.Uuid
  stripeAccountId    String   @unique
  chargesEnabled     Boolean  @default(false)
  payoutsEnabled     Boolean  @default(false)
  onboardingComplete Boolean  @default(false)
  businessId         String   @unique @db.Uuid
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
  business           Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
}

model StripeCustomer {
  id               String   @id @default(uuid()) @db.Uuid
  stripeCustomerId String
  profileId        String   @unique @db.Uuid
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  profile          Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model WebhookEvent {
  id               String             @id @default(uuid()) @db.Uuid
  data             Json
  source           String             @db.VarChar(225)
  processingErrors String
  status           WebhookEventStatus
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
}

enum Language {
  EN
  FR
}

enum ProfileType {
  BUSINESS
  INSTRUCTOR
  STUDENT
}

enum Frequency {
  ONCE
  RECURRING
}

enum Weekday {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

enum WebhookEventStatus {
  DONE
  FAILED
  PENDING
}
